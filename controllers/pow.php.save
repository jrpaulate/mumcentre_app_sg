<?php

class Pow extends CI_Controller {

  function __construct() {
    parent::__construct();

    $this -> load -> library('common');
    $this -> load -> helper('url');
    $this -> load -> library('rb');
    
	
    $this -> load -> model('Pow_model', 'pow');
    $this -> load -> helper('miscfuncs');
    $this -> load -> library('bucket');
    $this -> bucket -> set_layout_id('mumcentre/desktop');
    $this -> bucket -> add_css('mums');
    $this -> bucket -> add_css('athan');
    $this -> bucket -> add_css('pow');
    $this -> bucket -> add_css('pow-v2');

    $this -> data = array();
    $this -> data['activenav'] = "vote";

    //$this -> data['error'] = $this -> pow -> __checklist();
  }

  function index() {
    redirect('pow/entries');
    //return $this->enter();
  }

  private function __check_session() {
    if ($this -> session -> userdata('logged_in') == TRUE)
      $this -> data['user_id'] = $this -> session -> userdata('user_id');
    else
      redirect('pow');

    return true;
  }

  /////////////////////////////////
  /// POW ENTRY - JOIN

  /**
   *
   */
  function join() {
    // check the user session
    $this -> __check_session();
    $this -> data['activenav'] = "join";

    if (!@issetNE($_POST)) {

      if ("true" == @issetVal($this -> pow -> options['use_ajax_uploader'])) {
        $this -> bucket -> set_content_id('pow/pow_enter_ajax');
      } else {
        $this -> bucket -> set_content_id('pow/pow_enter');
      }

      $this -> data['token_id'] = md5(implode('#', array(generate_random(20, 'ALPHANUM'), input_datetime('now'))));

      $contest_info = array_shift($this -> pow -> contest_active_get(ACTIVESUBMIT_CONTEST));
      $category_list = ($contest_info) ? $this -> pow -> contest_categories_list($contest_info['id']) : false;

      $this -> data['contest_info'] = $contest_info;
      $this -> data['category_list'] = $category_list;
      $this -> data['upload_path'] = $this -> pow -> options['upload_path'];

      $data = $this -> data;
      $this -> bucket -> set_data('data', $data);
      $this -> bucket -> set_data('title', "Mumcentre");

      $this -> bucket -> render_layout();

    } else {

      $postdata = $_POST;
      $postdata['user_id'] = $this -> data['user_id'];

      if ("true" == @issetVal($this -> pow -> options['use_ajax_uploader'])) {
        $postdata = $this -> _join_ajaxupload_process($postdata);
      }

      // actually add the entry
      $resp = $this -> pow -> entry_add($postdata['pow_category_id'], $postdata, true);

      if ($resp < 0) {
        echo json_encode($resp);
        exit();
      }

      $this -> __add_tomy_entries($resp['data']['token_id']);

      redirect("pow/join_success/" . $resp['data']['token_id']);
    }
  }

  function join_success($token_id = false) {
    $this -> data['activenav'] = "join";

    $ck_token = $this -> __is_owner($token_id);
    if (!$token_id && !!$ck_token) {
      redirect("pow/entry_share/{$ck_token}");
    }

    if (!$token_id || !$ck_token || $ck_token !== $token_id)
      redirect('pow/');

    $token_id = $ck_token;

    $this -> data['entry_info'] = $this -> pow -> entry_get_bytoken($token_id);

    $this -> bucket -> set_content_id('pow/pow_join_success');

    $this -> bucket -> add_css('mums');
    $this -> bucket -> add_css('athan');
    $this -> bucket -> add_css('pow');

    /*
     $this -> data['_list'] = $this -> pow -> categories_getall();
     $this -> data['activecontest'] = $this -> pow -> contest_getactive();
     $this -> data['entry_info'] = $this -> pow -> entry_get_bytoken($token_id);

     $this -> data['contest_entries'] = array();
     $this -> data['agegroup_list'] = $this -> pow -> agegroup_getall();
     $this -> data['agegroup_id'] = @issetVal($agegroup_id, $this -> data['agegroup_list'][0]['id']);
     $this -> data['agegroup_info'] = $this -> pow -> agegroup_get($this -> data['agegroup_id']);
     */

    $data = $this -> data;
    $this -> bucket -> set_data('data', $data);
    $this -> bucket -> set_data('title', "Mumcentre");

    $this -> bucket -> render_layout();
  }

  /**
   *
   */
  private function _join_ajaxupload_process($postdata) {

    $target_path = $this -> pow -> __entry_photopath($postdata);
    $target_path .= '/' . $postdata['img_filename'];

    // crop the image
    $cropped_filename = 'cropped-' . $postdata['img_filename'];
    $cropped_image = $this -> pow -> __entry_photopath($postdata) . '/' . $cropped_filename;
    cropImage($target_path, $cropped_image, $postdata['img-wd'], $postdata['img-ht'], $postdata['img-x1'], $postdata['img-y1']);
    $postdata['img_filename'] = $cropped_filename;

    // create thumnails
    $this -> pow -> entry_photo_createthumbnails($postdata['img_filetype'], $this -> pow -> __entry_photopath($postdata), $postdata['img_filename']);

    $postdata['photo_filename'] = $postdata['img_filename'];
    $postdata['image_type'] = $postdata['img_filetype'];
    $postdata['created_date'] = input_datetime('now');

    return $postdata;
  }

  function join_ajaxupload() {
    // check the user session
    $this -> __check_session();

    $postdata = array('token_id' => $this -> input -> post('token_id'), 'pow_category_id' => $this -> input -> post('pow_category_id'));
    $json = array();

    // Configure Upload class
    $target_path = $this -> pow -> __entry_photopath($postdata);
    if (!is_dir($target_path)) {
      if (mkdir($target_path, 0777, true) === FALSE) {// try to create the dir
        $json['status'] = 'error';
        $json['issue'] = "Unable to create directory $target_path";
        echo json_encode($json);
        exit ;
      }
    }

    $config['upload_path'] = $target_path;
    $config['allowed_types'] = $this -> pow -> options_get('allowed_imagetypes');
    $config['max_size'] = $this -> pow -> options_get('upload_max_kb');
    $config['max_width'] = $this -> pow -> options_get('upload_max_width');
    $config['max_height'] = $this -> pow -> options_get('upload_max_height');

    $this -> load -> library('upload', $config);

    // Output json as response
    if (!$this -> upload -> do_upload()) {
      $json['status'] = 'error';
      $json['issue'] = $this -> upload -> display_errors('', '');
    } else {
      $json['status'] = 'success';
      foreach ($this->upload->data() as $k => $v) {
        $json[$k] = $v;
      }
    }
    echo json_encode($json);
  }

  private function __add_tomy_entries($token_id) {
    // write to cookie
    $ent = json_decode(@issetVal($_COOKIE['ent']));
    $ent = !is_array($ent) ? array() : $ent;
    $ent[] = $token_id;

    setcookie('ent', json_encode($ent), 0, '/');
  }

  private function __is_owner($token_id = false) {
    if (!$token_id)
      return false;

    $ent = json_decode(@issetVal($_COOKIE['ent']));
    $ent = !is_array($ent) ? array() : $ent;

    return in_array($token_id, $ent) ? $token_id : false;
  }

  function myentries($contest_id = 0) {
    $this -> __check_session();
    $this -> data['activenav'] = "vote";

    if (!$contest_id) {
      $this -> data['contest_info'] = $this -> pow -> contest_getactive();
      $contest_id = $this -> data['contest_info']['id'];
    } else {
      $this -> data['contest_info'] = $this -> pow -> contest_get($contest_id);
    }

    if (!$this -> data['contest_info']) {
      redirect('pow');
    }

    // get all the user entries
    $this -> data['contest_entries'] = $this -> pow -> entries_getall_byuser_countpoints($this -> data['user_id']);

    $this -> bucket -> set_content_id('mumcentre/pow_myentries');

    $this -> bucket -> add_css('scrollable-horizontal');
    $this -> bucket -> add_css('scrollable-buttons');
    //        $this->bucket->add_css('style');

    $data = $this -> data;
    $this -> bucket -> set_data('data', $data);
    $this -> bucket -> set_data('title', "Mumcentre");
    $this -> bucket -> render_layout();
  }

  /**
   * gets all the entries for the pow
   */
  function entries($category_id = 0) {
    $this -> bucket -> set_content_id('pow/pow_entries');
    $this -> data['activenav'] = "vote";
    $contest_info = $this -> pow -> contest_active_get(ACTIVEVOTING_CONTEST);
    $contest_info = $contest_info ? array_shift($contest_info) : false;
    
    $category_list = ($contest_info) ? $this -> pow -> contest_categories_list($contest_info['id']) : false;
    
    if (! $category_id){
      $category_id  = @issetVal( $category_list[0]['id'] );      
    }    
    $category_info = $category_id ? $this -> pow -> category_get($category_id) : false;
    
    $this -> data['contest_info'] = $contest_info;
    $this -> data['category_list'] = $category_list;
    $this -> data['category_id'] = $category_id;
    $this -> data['category_info'] = $category_info;

    $this -> data['contest_entries'] = $this -> pow -> contest_entriesall($contest_info['id'], $category_id);

    $this -> bucket -> add_css('scrollable-horizontal');
    $this -> bucket -> add_css('scrollable-buttons');

    $data = $this -> data;
    $this -> bucket -> set_data('data', $data);
    $this -> bucket -> set_data('title', "Mumcentre");
    $this -> bucket -> render_layout();
  }

  function entry($token_id = false) {
    $this -> data['activenav'] = "vote";

    if (!$token_id)
      redirect('pow/entries');

    $this -> bucket -> set_content_id('pow/pow_view');

    $this -> data['entry_info'] = $this -> pow -> contest_entry_bytokenid($token_id);
    $this -> data['contest_entries'] = $this -> pow -> contest_entriesall($this -> data['entry_info']['contest_id']);
    $this -> data['category_info'] = $this -> pow -> category_get($this -> data['entry_info']['category_id']) ;
    
    $this -> data['upload_path'] = $this -> pow -> options['upload_path'];

    $this -> bucket -> add_css('scrollable-horizontal');
    $this -> bucket -> add_css('scrollable-buttons');
    //        $this->bucket->add_css('style');

    $data = $this -> data;
    $this -> bucket -> set_data('data', $data);
    $this -> bucket -> set_data('title', "Mumcentre");
    $this -> bucket -> render_layout();
  }

  function vote($token_id = false) {
    $this -> data['activenav'] = "vote";
    if (!$token_id)
      redirect('pow/entries');

    $this -> bucket -> set_content_id('pow/pow_vote');
    $this -> bucket -> set_data('title', "Mumcentre");

    $this -> data['entry_info'] = $this -> pow -> contest_entry_bytokenid($token_id);
    $this -> data['contest_entries'] = $this -> pow -> contest_entriesall($this -> data['entry_info']['contest_id']);
    $this -> data['category_info'] = $this -> pow -> category_get($this -> data['entry_info']['category_id']) ;
    
    $this -> data['upload_path'] = $this -> pow -> options['upload_path'];

    if ($this -> session -> userdata('user_id')) {
      $userdata = $this -> pow -> user_get($this -> session -> userdata('user_id'));
      $this -> data['email_address'] = $userdata['email_address'];
    }

    $this -> data['email_address'] = @issetVal($_POST['email_address'], $this -> data['email_address']);
    $resp = $this -> pow -> vote_entry($token_id, $this -> data['email_address']);

    if ($resp['code'] < 0) {
      if (!empty($this -> data['email_address'])) {
        $this -> data['error'][] = $resp['message'];
      }

      $data = $this -> data;
      $this -> bucket -> set_data('data', $data);
      $this -> bucket -> render_layout();

    } else {
      if ($this -> session -> userdata('logged_in')) {
        redirect("pow/votesuccess/{$token_id}");

      } else {
        redirect("pow/verifyvote/{$token_id}");
      }

    }
  }

  function entry_share($token_id = false) {
    $this -> data['activenav'] = "join";

    $ck_token = $this -> __is_owner($token_id);
    if (!$token_id && !!$ck_token) {
      redirect("pow/entry_share/{$ck_token}");
    }

    if (!$token_id || !$ck_token || $ck_token !== $token_id)
      redirect('pow/');
    $token_id = $ck_token;

    $this -> data['entry_info'] = $this -> pow -> entry_get_bytoken($token_id);

    if (@issetNE($_POST)) {
      $emailnote = $this -> input -> post('emailnote');
      $recipients = $this -> input -> post('emaillist');

      $resp = $this -> pow -> entry_emailshare($this -> data['entry_info']['id'], $recipients, $emailnote);
    }

    $this -> bucket -> set_layout_id('mumcentre/desktop');
    $this -> bucket -> set_content_id('mumcentre/pow_entershare');

    $this -> bucket -> add_css('mums');
    $this -> bucket -> add_css('athan');
    $this -> bucket -> add_css('pow');

    /*
     $this -> data['_list'] = $this -> pow -> categories_getall();
     $this -> data['activecontest'] = $this -> pow -> contest_getactive();
     $this -> data['entry_info'] = $this -> pow -> entry_get_bytoken($token_id);

     $this -> data['contest_entries'] = array();
     $this -> data['agegroup_list'] = $this -> pow -> agegroup_getall();
     $this -> data['agegroup_id'] = @issetVal($agegroup_id, $this -> data['agegroup_list'][0]['id']);
     $this -> data['agegroup_info'] = $this -> pow -> agegroup_get($this -> data['agegroup_id']);
     */

    $data = $this -> data;
    $this -> bucket -> set_data('data', $data);
    $this -> bucket -> set_data('title', "Mumcentre");

    $this -> bucket -> render_layout();
  }

  function fetch_contact() {
    if (empty($_POST))
      return false;

    $provider = $this -> input -> post('provider');
    $username = $this -> input -> post('username');
    $password = $this -> input -> post('password');

    $resp = $this -> pow -> fetch_contact($provider, $username, $password);

    echo json_encode($resp);
  }

  function verifyvote($token_id = false) {
    if (!$token_id)
      redirect('pow/');

    $this -> data['activenav'] = "vote";
    $this -> bucket -> set_content_id('pow/pow_vote_verify');
    $this -> bucket -> set_data('title', "Mumcentre");
    
    $this -> data['entry_info'] = $this -> pow -> contest_entry_bytokenid($token_id);
    $this -> data['contest_entries'] = $this -> pow -> contest_entriesall($this -> data['entry_info']['contest_id']);
    $this -> data['category_info'] = $this -> pow -> category_get($this -> data['entry_info']['category_id']) ;
    

    if (!$this -> data['entry_info'])
      redirect('pow/entries');

    $this -> data['vote_code'] = @issetVal($_POST['vote_code'], false);
    $resp = $this -> pow -> vote_code_verify($this -> data['vote_code']);

    if ($resp['code'] < 0) {
      if (!empty($this -> data['vote_code'])) {
        $this -> data['error'][] = $resp['message'];
      }

      $data = $this -> data;
      $this -> bucket -> set_data('data', $data);
      $this -> bucket -> render_layout();

    } else {
      redirect("pow/votesuccess/{$token_id}");
    }

  }

  function votesuccess($token_id) {
    $this -> data['activenav'] = "vote";

    if (!$token_id)
      redirect('pow/entries');

    $this -> bucket -> set_content_id('pow/pow_vote_success');
    $this -> bucket -> set_data('title', "Mumcentre");

    $this -> data['entry_info'] = $this -> pow -> contest_entry_bytokenid($token_id);
    $this -> data['contest_entries'] = $this -> pow -> contest_entriesall($this -> data['entry_info']['contest_id']);
    $this -> data['category_info'] = $this -> pow -> category_get($this -> data['entry_info']['category_id']) ;

    if (!$this -> data['entry_info'])
      redirect('pow/entries');

    $data = $this -> data;
    $this -> bucket -> set_data('data', $data);
    $this -> bucket -> render_layout();
  }

  function entry_getphoto($token_id = 0, $size = false) {
    if (!$token_id)
      return false;
    list($photo, $type, $path) = $this -> pow -> entryphoto_get($token_id, $size);
    $imgurl = sprintf("/%s/%s/%s", $this -> pow -> options['upload_path'], $token_id, $photo);
    echo $imgurl;
  }

  function winners($agegroup = false) {
    $this -> data['activenav'] = "winners";

    if (!@issetNE($agegroup)) {
      $this -> data['results'] = $this -> pow -> results_getlatest();

      if (!$this -> data['results']) {
        $this -> data['error'][] = "There are no concluded Pick Of the Week contests yet.";
      }

      $this -> bucket -> set_layout_id('mumcentre/desktop');
      $this -> bucket -> set_content_id('mumcentre/pow_latest_winners');

    } else {

      $agegroup = 0;
      foreach ($this -> data['$agegroup_list'] as $categs) {
        if ($agegroup == $categs['name']) {
          $agegroup = $categs['id'];
          break;
        }
      }
      /*
       $this -> data['results'] = array_shift($this -> pow -> results_getlatest($agegroup));
       $this -> data['entry_info'] = $this -> pow -> entry_get_bytoken($this -> data['results']['token_id']);
       $this -> data['pastwinners'] = $this -> pow -> results_getwinners_all($pow_category_id);
       */
      $this -> bucket -> set_layout_id('mumcentre/desktop');
      $this -> bucket -> set_content_id('mumcentre/pow_category_winner');
    }

    $this -> bucket -> add_css('mums');
    $this -> bucket -> add_css('athan');
    $this -> bucket -> add_css('pow');
    $this -> bucket -> add_css('scrollable-horizontal');
    $this -> bucket -> add_css('scrollable-buttons');
    //        $this->bucket->add_css('style');

    $data = $this -> data;
    $this -> bucket -> set_data('data', $data);
    $this -> bucket -> set_data('title', "Mumcentre");
    $this -> bucket -> render_layout();
  }

  function about() {
    $this -> data['activenav'] = "about";
  }

  function error($errmsg) {
    echo "There are current errors: ";
  }

}
?>
